@inject NavigationManager Navigation
@inject IHttpClientFactory ClientFactory
@rendermode InteractiveAuto

<PageHeader Title="Edit Artist" />

<ErrorMessage Message="@errorMessage" OnDeleteNotification="ResetError"/>

<ArtistForm UpdatedArtist="UpdatedArtist" OnValidSubmit="HandleValidSubmit" OnCancel="HandleCancel" />

@code {
    [Parameter]
    public ArtistDetails? UpdatedArtist { get; set; }

    protected string? errorMessage;

    protected async Task HandleValidSubmit(ArtistDetails artistDetails)
    {
        try
        {
            var client = ClientFactory.CreateClient("RecordStoreAPI");

            var response = await client.PutAsync($"/Artists/{artistDetails.Id}", JsonContent.Create(artistDetails));

            string responseBody = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo($"/Artists/{artistDetails.Id}?edited=true");
            }
            else
            {
                errorMessage = $"{response.StatusCode}: {responseBody}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occured: {ex.Message}";
        }
    }

    protected void HandleCancel()
    {
        Navigation.NavigateTo($"/Artists/{UpdatedArtist!.Id}");
    }

    protected void ResetError()
    {
        errorMessage = null;
    }
}

