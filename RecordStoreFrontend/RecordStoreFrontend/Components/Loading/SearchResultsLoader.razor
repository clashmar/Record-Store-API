@using System.Text.Json
@inject IHttpClientFactory ClientFactory
@rendermode InteractiveAuto
@page "/Search"

@if (errorMessage != null)
{
    <ErrorMessage Message="@errorMessage" OnDeleteNotification="ResetError"/>
}
else if (Results == null)
{
    <Loading />
}
else
{
    <SearchResultsPage Results="Results"/>
}

@code {
    [SupplyParameterFromQuery]
    public string? SearchTerm { get; set; }

    protected List<SearchResult>? Results { get; set; }

    protected string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var client = ClientFactory.CreateClient("RecordStoreAPI");

            var response = await client.GetAsync($"Search/{SearchTerm}");

            string responseBody = await response.Content.ReadAsStringAsync();

            if(response.IsSuccessStatusCode) 
            {
                Results = JsonSerializer.Deserialize<List<SearchResult>>(responseBody)!;
            }
            else 
            {
                errorMessage = $"{response.StatusCode}: {responseBody}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occured: {ex.Message}";
        }
    }

    protected void ResetError()
    {
        errorMessage = "";
    }
}