@inject IHttpClientFactory ClientFactory
@page "/Albums/{Id:int}/Edit"

@if (errorMessage != null)
{
    <ErrorMessage Error="@errorMessage" />
}
else if (AlbumToUpdate == null)
{
    <Loading />
}
else
{
    <PutAlbumForm UpdatedAlbum="UpdatedAlbum" Id="Id" />
}

@code {
    public AlbumReturnDto? AlbumToUpdate { get; set; }

    public AlbumDetails? UpdatedAlbum { get; set; } = new();

    [Parameter]
    public int Id { get; set; }

    protected string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var client = ClientFactory.CreateClient("RecordStoreAPI");

            var response = await client.GetFromJsonAsync<AlbumReturnDto>($"/Albums/{Id}");

            AlbumToUpdate = response != null ? response : null;

            if (AlbumToUpdate != null)
            {
                UpdatedAlbum!.AlbumID = AlbumToUpdate.Id;
                UpdatedAlbum!.Name = AlbumToUpdate.Name;
                UpdatedAlbum!.ArtistName = AlbumToUpdate.Artist!;
                UpdatedAlbum!.ArtistID = AlbumToUpdate.ArtistId;
                UpdatedAlbum!.ReleaseYear = AlbumToUpdate.ReleaseYear;
                UpdatedAlbum!.Genres = AlbumToUpdate.Genres;
                UpdatedAlbum!.Information = AlbumToUpdate.Information;
                UpdatedAlbum!.StockQuantity = AlbumToUpdate.StockQuantity;
                UpdatedAlbum!.PriceInPence = AlbumToUpdate.PriceInPence;
            }
            else
            {
                errorMessage = $"Could not find album.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occured: {ex.Message}";
        }
    }
}

