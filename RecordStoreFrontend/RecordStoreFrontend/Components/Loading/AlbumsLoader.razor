@inject IHttpClientFactory ClientFactory
@inject NavigationManager Navigation
@page "/Albums"

@if(errorMessage != null)
{
    <ErrorMessage Error="errorMessage" />
}
else if(Albums == null) 
{
    <Loading />
}
else
{
    <CascadingValue Value="Deleted">
        <CascadingValue Value="Albums">
            <Albums/>
        </CascadingValue>
    </CascadingValue>
}

@code {
    [SupplyParameterFromQuery]
    public bool Deleted { get; set; }

    protected List<AlbumReturnDto> Albums { get; set; } = [];

    protected string? errorMessage;

    protected override async Task OnInitializedAsync() {

        try
        {
            var client = ClientFactory.CreateClient("RecordStoreAPI");

            var response = await client.GetFromJsonAsync<List<AlbumReturnDto>>("Albums");

            Albums = response != null ? response : [];
        }
        catch(Exception ex) 
        {
            errorMessage = $"An error occured: {ex.Message}";
        }
    }
}
