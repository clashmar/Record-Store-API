@inject NavigationManager Navigation
@inject IHttpClientFactory ClientFactory
@page "/Artists/{Id:int}"

@if (errorMessage != null)
{
    <ErrorMessage Message="@errorMessage" />
}
else if (Artist == null)
{
    <Loading />
}
else
{
    <CascadingValue Value="Edited">
        <ArtistPage Artist="Artist" Edited="Edited" />
    </CascadingValue>
}   

@code {
    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromQuery]
    public bool Edited { get; set; }

    protected ArtistReturnDto? Artist { get; set; }

    protected string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var client = ClientFactory.CreateClient("RecordStoreAPI");

            var response = await client.GetFromJsonAsync<ArtistReturnDto>($"/Artists/{Id}");

            Artist = response;
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occured: {ex.Message}";
        }
    }
}
