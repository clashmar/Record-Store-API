@rendermode InteractiveServer

<div>
    <EditForm FormName="PutAlbumForm" Model="UpdatedAlbum" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
        <DataAnnotationsValidator />
        <div class="field">
            <label class="label">Name</label>
            <div class="control" width="20px">
                <InputText class="input" placeholder="Album Name" @bind-Value="UpdatedAlbum!.Name"></InputText>
                <ValidationMessage class="help is-danger" For="@(() => UpdatedAlbum!.Name)" />
            </div>
        </div>
        
        <div class="field">
            <label class="label">Artist</label>
            <div class="control has-icons-right">
                <InputText class="input" placeholder="Artist Name" @bind-Value="UpdatedAlbum!.ArtistName"></InputText>
                <ValidationMessage class="help is-danger" For="@(() => UpdatedAlbum!.ArtistName)" />
                <span class="icon is-right">
                    <i class="fas fa-check"></i>
                </span>
            </div>
        </div>

        <div class="field">
            <label class="label">Release Year</label>
            <div class="control has-icons-right">
                <InputNumber class="input" placeholder="Release Year" @bind-Value="UpdatedAlbum!.ReleaseYear"></InputNumber>
                <ValidationMessage class="help is-danger" For="@(() => UpdatedAlbum!.ReleaseYear)" />
                <span class="icon is-right">
                    <i class="fas fa-check"></i>
                </span>
            </div>
        </div>

        <div class="field">
            <label class="label">Add/Delete Genre</label>
            <div class="control">
                <div class="select mr-2">

                    <InputSelect @bind-Value="genreToAdd">
                        <option value="">Add Genre</option>
                        @foreach (string genre in Genre.ReturnGenresInOrder())
                        {
                            <option>@genre</option>
                        }
                    </InputSelect>
                    <ValidationMessage class="help is-danger" For="@(() => UpdatedAlbum!.Genres)" />
                </div>
                <button class="button is-outlined ml-2 mr-2 is-success" type="button" @onclick="()=>AddGenre()">Add</button>
                @foreach (var genre in UpdatedAlbum!.Genres)
                {
                    <button class="button is-outlined ml-2 mr-2 is-danger" type="button" @onclick="()=>DeleteGenre(genre)">@Genre.ToFriendlyString(genre)</button>
                }
            </div>
        </div>

        <div class="field pb-3">
            <label class="label">Information</label>
            <div class="control">
                <InputTextArea class="textarea" placeholder="Album Info" @bind-Value="UpdatedAlbum!.Information"></InputTextArea>
            </div>
        </div>

        <div class="field is-grouped pb-6">
            <div class="control">
                <button class="button is-light" type="submit">Submit</button>
            </div>
            <div class="control">
                <button class="button is-dark" type="button">Cancel</button>
            </div>
            <p class="help is-danger mt-2">@warning</p>
        </div>

    </EditForm>

    @if(updated) 
    {
        <h2>Genre to add: @genreToAdd</h2>
        <h2>@UpdatedAlbum.Name</h2>
        <h2>@UpdatedAlbum.ArtistName</h2>
        <h2>@UpdatedAlbum.ArtistID</h2>
        <h2>@UpdatedAlbum.ReleaseYear</h2>
        @foreach(Genres genre in UpdatedAlbum.Genres)
        {
            <h2>@Genre.ToFriendlyString(genre)</h2>
        }
        <h2>@UpdatedAlbum.Information</h2>
        <h2>@UpdatedAlbum.StockQuantity</h2>
        <h2>@UpdatedAlbum.PriceInPence</h2>
    }
</div>

@code {
    [Parameter]
    public AlbumDetails? UpdatedAlbum { get; set; }

    [Parameter]
    public int ID { get; set; } = 1;

    private bool updated = false;

    private string genreToAdd = "";

    private string warning = "";

    public void HandleValidSubmit() 
    {
        updated = !updated; warning = "";
    }

    public void HandleInvalidSubmit() 
    {
        warning = "Make Sure All Fields Have Been Completed";
    }

    private void AddGenre()
    {
        var result = Genre.ToGenre(genreToAdd);

        if (result.success && !UpdatedAlbum!.Genres.Contains(result.genre)) 
        UpdatedAlbum!.Genres.Add(result.genre);
    }

    private void DeleteGenre(Genres genre) 
    {
        UpdatedAlbum!.Genres.Remove(genre);      
    }
}
